# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VulnerabilityItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'package': 'str',
        'version': 'str',
        'fix_version': 'str',
        'severity': 'str',
        'description': 'str',
        'links': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'package': 'package',
        'version': 'version',
        'fix_version': 'fix_version',
        'severity': 'severity',
        'description': 'description',
        'links': 'links'
    }

    def __init__(self, id=None, package=None, version=None, fix_version=None, severity=None, description=None, links=None):  # noqa: E501
        """VulnerabilityItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._package = None
        self._version = None
        self._fix_version = None
        self._severity = None
        self._description = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if package is not None:
            self.package = package
        if version is not None:
            self.version = version
        if fix_version is not None:
            self.fix_version = fix_version
        if severity is not None:
            self.severity = severity
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this VulnerabilityItem.  # noqa: E501

        ID of the CVE.  # noqa: E501

        :return: The id of this VulnerabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VulnerabilityItem.

        ID of the CVE.  # noqa: E501

        :param id: The id of this VulnerabilityItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def package(self):
        """Gets the package of this VulnerabilityItem.  # noqa: E501

        An operating system or software dependency package containing the vulnerability.  # noqa: E501

        :return: The package of this VulnerabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this VulnerabilityItem.

        An operating system or software dependency package containing the vulnerability.  # noqa: E501

        :param package: The package of this VulnerabilityItem.  # noqa: E501
        :type: str
        """

        self._package = package

    @property
    def version(self):
        """Gets the version of this VulnerabilityItem.  # noqa: E501

        The version of the package containing the vulnerability.  # noqa: E501

        :return: The version of this VulnerabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VulnerabilityItem.

        The version of the package containing the vulnerability.  # noqa: E501

        :param version: The version of this VulnerabilityItem.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def fix_version(self):
        """Gets the fix_version of this VulnerabilityItem.  # noqa: E501

        The version of the package containing the fix if available.  # noqa: E501

        :return: The fix_version of this VulnerabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._fix_version

    @fix_version.setter
    def fix_version(self, fix_version):
        """Sets the fix_version of this VulnerabilityItem.

        The version of the package containing the fix if available.  # noqa: E501

        :param fix_version: The fix_version of this VulnerabilityItem.  # noqa: E501
        :type: str
        """

        self._fix_version = fix_version

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityItem.  # noqa: E501

        A standard scale for measuring the severity of a vulnerability.  # noqa: E501

        :return: The severity of this VulnerabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityItem.

        A standard scale for measuring the severity of a vulnerability.  # noqa: E501

        :param severity: The severity of this VulnerabilityItem.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this VulnerabilityItem.  # noqa: E501

        Description of the CVE  # noqa: E501

        :return: The description of this VulnerabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VulnerabilityItem.

        Description of the CVE  # noqa: E501

        :param description: The description of this VulnerabilityItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this VulnerabilityItem.  # noqa: E501

        The list of link to the upstream database with the full description of the vulnerability.  # noqa: E501

        :return: The links of this VulnerabilityItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VulnerabilityItem.

        The list of link to the upstream database with the full description of the vulnerability.  # noqa: E501

        :param links: The links of this VulnerabilityItem.  # noqa: E501
        :type: list[str]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
