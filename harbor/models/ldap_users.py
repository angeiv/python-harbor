# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LdapUsers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ldap_username': 'str',
        'ldap_realname': 'str',
        'ldap_email': 'str'
    }

    attribute_map = {
        'ldap_username': 'ldap_username',
        'ldap_realname': 'ldap_realname',
        'ldap_email': 'ldap_email'
    }

    def __init__(self, ldap_username=None, ldap_realname=None, ldap_email=None):  # noqa: E501
        """LdapUsers - a model defined in Swagger"""  # noqa: E501
        self._ldap_username = None
        self._ldap_realname = None
        self._ldap_email = None
        self.discriminator = None
        if ldap_username is not None:
            self.ldap_username = ldap_username
        if ldap_realname is not None:
            self.ldap_realname = ldap_realname
        if ldap_email is not None:
            self.ldap_email = ldap_email

    @property
    def ldap_username(self):
        """Gets the ldap_username of this LdapUsers.  # noqa: E501

        search ldap user name based on ldapconf.  # noqa: E501

        :return: The ldap_username of this LdapUsers.  # noqa: E501
        :rtype: str
        """
        return self._ldap_username

    @ldap_username.setter
    def ldap_username(self, ldap_username):
        """Sets the ldap_username of this LdapUsers.

        search ldap user name based on ldapconf.  # noqa: E501

        :param ldap_username: The ldap_username of this LdapUsers.  # noqa: E501
        :type: str
        """

        self._ldap_username = ldap_username

    @property
    def ldap_realname(self):
        """Gets the ldap_realname of this LdapUsers.  # noqa: E501

        system will try to guess the user realname form \"uid\" or \"cn\" attribute.  # noqa: E501

        :return: The ldap_realname of this LdapUsers.  # noqa: E501
        :rtype: str
        """
        return self._ldap_realname

    @ldap_realname.setter
    def ldap_realname(self, ldap_realname):
        """Sets the ldap_realname of this LdapUsers.

        system will try to guess the user realname form \"uid\" or \"cn\" attribute.  # noqa: E501

        :param ldap_realname: The ldap_realname of this LdapUsers.  # noqa: E501
        :type: str
        """

        self._ldap_realname = ldap_realname

    @property
    def ldap_email(self):
        """Gets the ldap_email of this LdapUsers.  # noqa: E501

        system will try to guess the user email address form \"mail\" or \"email\" attribute.  # noqa: E501

        :return: The ldap_email of this LdapUsers.  # noqa: E501
        :rtype: str
        """
        return self._ldap_email

    @ldap_email.setter
    def ldap_email(self, ldap_email):
        """Sets the ldap_email of this LdapUsers.

        system will try to guess the user email address form \"mail\" or \"email\" attribute.  # noqa: E501

        :param ldap_email: The ldap_email of this LdapUsers.  # noqa: E501
        :type: str
        """

        self._ldap_email = ldap_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapUsers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
