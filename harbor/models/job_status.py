# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'status': 'str',
        'repository': 'str',
        'policy_id': 'int',
        'operation': 'str',
        'tags': 'list[Tags]',
        'creation_time': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'repository': 'repository',
        'policy_id': 'policy_id',
        'operation': 'operation',
        'tags': 'tags',
        'creation_time': 'creation_time',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, status=None, repository=None, policy_id=None, operation=None, tags=None, creation_time=None, update_time=None):  # noqa: E501
        """JobStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._repository = None
        self._policy_id = None
        self._operation = None
        self._tags = None
        self._creation_time = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if repository is not None:
            self.repository = repository
        if policy_id is not None:
            self.policy_id = policy_id
        if operation is not None:
            self.operation = operation
        if tags is not None:
            self.tags = tags
        if creation_time is not None:
            self.creation_time = creation_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this JobStatus.  # noqa: E501

        The job ID.  # noqa: E501

        :return: The id of this JobStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobStatus.

        The job ID.  # noqa: E501

        :param id: The id of this JobStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this JobStatus.  # noqa: E501

        The status of the job.  # noqa: E501

        :return: The status of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobStatus.

        The status of the job.  # noqa: E501

        :param status: The status of this JobStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def repository(self):
        """Gets the repository of this JobStatus.  # noqa: E501

        The repository handled by the job.  # noqa: E501

        :return: The repository of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this JobStatus.

        The repository handled by the job.  # noqa: E501

        :param repository: The repository of this JobStatus.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def policy_id(self):
        """Gets the policy_id of this JobStatus.  # noqa: E501

        The ID of the policy that triggered this job.  # noqa: E501

        :return: The policy_id of this JobStatus.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this JobStatus.

        The ID of the policy that triggered this job.  # noqa: E501

        :param policy_id: The policy_id of this JobStatus.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def operation(self):
        """Gets the operation of this JobStatus.  # noqa: E501

        The operation of the job.  # noqa: E501

        :return: The operation of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this JobStatus.

        The operation of the job.  # noqa: E501

        :param operation: The operation of this JobStatus.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def tags(self):
        """Gets the tags of this JobStatus.  # noqa: E501

        The repository's used tag list.  # noqa: E501

        :return: The tags of this JobStatus.  # noqa: E501
        :rtype: list[Tags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobStatus.

        The repository's used tag list.  # noqa: E501

        :param tags: The tags of this JobStatus.  # noqa: E501
        :type: list[Tags]
        """

        self._tags = tags

    @property
    def creation_time(self):
        """Gets the creation_time of this JobStatus.  # noqa: E501

        The creation time of the job.  # noqa: E501

        :return: The creation_time of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this JobStatus.

        The creation time of the job.  # noqa: E501

        :param creation_time: The creation_time of this JobStatus.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this JobStatus.  # noqa: E501

        The update time of the job.  # noqa: E501

        :return: The update_time of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this JobStatus.

        The update time of the job.  # noqa: E501

        :param update_time: The update_time of this JobStatus.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
