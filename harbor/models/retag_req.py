# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RetagReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag': 'str',
        'src_image': 'str',
        'override': 'bool'
    }

    attribute_map = {
        'tag': 'tag',
        'src_image': 'src_image',
        'override': 'override'
    }

    def __init__(self, tag=None, src_image=None, override=None):  # noqa: E501
        """RetagReq - a model defined in Swagger"""  # noqa: E501
        self._tag = None
        self._src_image = None
        self._override = None
        self.discriminator = None
        if tag is not None:
            self.tag = tag
        if src_image is not None:
            self.src_image = src_image
        if override is not None:
            self.override = override

    @property
    def tag(self):
        """Gets the tag of this RetagReq.  # noqa: E501

        new tag to be created  # noqa: E501

        :return: The tag of this RetagReq.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this RetagReq.

        new tag to be created  # noqa: E501

        :param tag: The tag of this RetagReq.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def src_image(self):
        """Gets the src_image of this RetagReq.  # noqa: E501

        Source image to be retagged, e.g. 'stage/app:v1.0'  # noqa: E501

        :return: The src_image of this RetagReq.  # noqa: E501
        :rtype: str
        """
        return self._src_image

    @src_image.setter
    def src_image(self, src_image):
        """Sets the src_image of this RetagReq.

        Source image to be retagged, e.g. 'stage/app:v1.0'  # noqa: E501

        :param src_image: The src_image of this RetagReq.  # noqa: E501
        :type: str
        """

        self._src_image = src_image

    @property
    def override(self):
        """Gets the override of this RetagReq.  # noqa: E501

        If target tag already exists, whether to override it  # noqa: E501

        :return: The override of this RetagReq.  # noqa: E501
        :rtype: bool
        """
        return self._override

    @override.setter
    def override(self, override):
        """Sets the override of this RetagReq.

        If target tag already exists, whether to override it  # noqa: E501

        :param override: The override of this RetagReq.  # noqa: E501
        :type: bool
        """

        self._override = override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetagReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetagReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
