# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PingRegistry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'url': 'str',
        'credential_type': 'str',
        'access_key': 'str',
        'access_secret': 'str',
        'insecure': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'url': 'url',
        'credential_type': 'credential_type',
        'access_key': 'access_key',
        'access_secret': 'access_secret',
        'insecure': 'insecure'
    }

    def __init__(self, id=None, type=None, url=None, credential_type=None, access_key=None, access_secret=None, insecure=None):  # noqa: E501
        """PingRegistry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._url = None
        self._credential_type = None
        self._access_key = None
        self._access_secret = None
        self._insecure = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if credential_type is not None:
            self.credential_type = credential_type
        if access_key is not None:
            self.access_key = access_key
        if access_secret is not None:
            self.access_secret = access_secret
        if insecure is not None:
            self.insecure = insecure

    @property
    def id(self):
        """Gets the id of this PingRegistry.  # noqa: E501

        The ID of the registry  # noqa: E501

        :return: The id of this PingRegistry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PingRegistry.

        The ID of the registry  # noqa: E501

        :param id: The id of this PingRegistry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PingRegistry.  # noqa: E501

        Type of the registry, e.g. 'harbor'.  # noqa: E501

        :return: The type of this PingRegistry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PingRegistry.

        Type of the registry, e.g. 'harbor'.  # noqa: E501

        :param type: The type of this PingRegistry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this PingRegistry.  # noqa: E501

        The registry address URL string.  # noqa: E501

        :return: The url of this PingRegistry.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PingRegistry.

        The registry address URL string.  # noqa: E501

        :param url: The url of this PingRegistry.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def credential_type(self):
        """Gets the credential_type of this PingRegistry.  # noqa: E501

        Credential type of the registry, e.g. 'basic'.  # noqa: E501

        :return: The credential_type of this PingRegistry.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this PingRegistry.

        Credential type of the registry, e.g. 'basic'.  # noqa: E501

        :param credential_type: The credential_type of this PingRegistry.  # noqa: E501
        :type: str
        """

        self._credential_type = credential_type

    @property
    def access_key(self):
        """Gets the access_key of this PingRegistry.  # noqa: E501

        The registry access key.  # noqa: E501

        :return: The access_key of this PingRegistry.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this PingRegistry.

        The registry access key.  # noqa: E501

        :param access_key: The access_key of this PingRegistry.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def access_secret(self):
        """Gets the access_secret of this PingRegistry.  # noqa: E501

        The registry access secret.  # noqa: E501

        :return: The access_secret of this PingRegistry.  # noqa: E501
        :rtype: str
        """
        return self._access_secret

    @access_secret.setter
    def access_secret(self, access_secret):
        """Sets the access_secret of this PingRegistry.

        The registry access secret.  # noqa: E501

        :param access_secret: The access_secret of this PingRegistry.  # noqa: E501
        :type: str
        """

        self._access_secret = access_secret

    @property
    def insecure(self):
        """Gets the insecure of this PingRegistry.  # noqa: E501

        Whether or not the certificate will be verified when Harbor tries to access the server.  # noqa: E501

        :return: The insecure of this PingRegistry.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this PingRegistry.

        Whether or not the certificate will be verified when Harbor tries to access the server.  # noqa: E501

        :param insecure: The insecure of this PingRegistry.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingRegistry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingRegistry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
