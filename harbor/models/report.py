# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generated_at': 'str',
        'severity': 'str',
        'vulnerabilities': 'list[VulnerabilityItem]',
        'scanner': 'Scanner'
    }

    attribute_map = {
        'generated_at': 'generated_at',
        'severity': 'severity',
        'vulnerabilities': 'vulnerabilities',
        'scanner': 'scanner'
    }

    def __init__(self, generated_at=None, severity=None, vulnerabilities=None, scanner=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501
        self._generated_at = None
        self._severity = None
        self._vulnerabilities = None
        self._scanner = None
        self.discriminator = None
        if generated_at is not None:
            self.generated_at = generated_at
        if severity is not None:
            self.severity = severity
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities
        if scanner is not None:
            self.scanner = scanner

    @property
    def generated_at(self):
        """Gets the generated_at of this Report.  # noqa: E501

        Time of generating this report  # noqa: E501

        :return: The generated_at of this Report.  # noqa: E501
        :rtype: str
        """
        return self._generated_at

    @generated_at.setter
    def generated_at(self, generated_at):
        """Sets the generated_at of this Report.

        Time of generating this report  # noqa: E501

        :param generated_at: The generated_at of this Report.  # noqa: E501
        :type: str
        """

        self._generated_at = generated_at

    @property
    def severity(self):
        """Gets the severity of this Report.  # noqa: E501

        A standard scale for measuring the severity of a vulnerability.  # noqa: E501

        :return: The severity of this Report.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Report.

        A standard scale for measuring the severity of a vulnerability.  # noqa: E501

        :param severity: The severity of this Report.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this Report.  # noqa: E501


        :return: The vulnerabilities of this Report.  # noqa: E501
        :rtype: list[VulnerabilityItem]
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this Report.


        :param vulnerabilities: The vulnerabilities of this Report.  # noqa: E501
        :type: list[VulnerabilityItem]
        """

        self._vulnerabilities = vulnerabilities

    @property
    def scanner(self):
        """Gets the scanner of this Report.  # noqa: E501


        :return: The scanner of this Report.  # noqa: E501
        :rtype: Scanner
        """
        return self._scanner

    @scanner.setter
    def scanner(self, scanner):
        """Sets the scanner of this Report.


        :param scanner: The scanner of this Report.  # noqa: E501
        :type: Scanner
        """

        self._scanner = scanner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
