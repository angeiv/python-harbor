# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ReplicationExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'policy_id': 'int',
        'status': 'str',
        'status_text': 'str',
        'trigger': 'str',
        'total': 'int',
        'failed': 'int',
        'succeed': 'int',
        'in_progress': 'int',
        'stopped': 'int',
        'start_time': 'str',
        'end_time': 'str'
    }

    attribute_map = {
        'id': 'id',
        'policy_id': 'policy_id',
        'status': 'status',
        'status_text': 'status_text',
        'trigger': 'trigger',
        'total': 'total',
        'failed': 'failed',
        'succeed': 'succeed',
        'in_progress': 'in_progress',
        'stopped': 'stopped',
        'start_time': 'start_time',
        'end_time': 'end_time'
    }

    def __init__(self, id=None, policy_id=None, status=None, status_text=None, trigger=None, total=None, failed=None, succeed=None, in_progress=None, stopped=None, start_time=None, end_time=None):  # noqa: E501
        """ReplicationExecution - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._policy_id = None
        self._status = None
        self._status_text = None
        self._trigger = None
        self._total = None
        self._failed = None
        self._succeed = None
        self._in_progress = None
        self._stopped = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if policy_id is not None:
            self.policy_id = policy_id
        if status is not None:
            self.status = status
        if status_text is not None:
            self.status_text = status_text
        if trigger is not None:
            self.trigger = trigger
        if total is not None:
            self.total = total
        if failed is not None:
            self.failed = failed
        if succeed is not None:
            self.succeed = succeed
        if in_progress is not None:
            self.in_progress = in_progress
        if stopped is not None:
            self.stopped = stopped
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def id(self):
        """Gets the id of this ReplicationExecution.  # noqa: E501

        The ID  # noqa: E501

        :return: The id of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationExecution.

        The ID  # noqa: E501

        :param id: The id of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def policy_id(self):
        """Gets the policy_id of this ReplicationExecution.  # noqa: E501

        The policy ID  # noqa: E501

        :return: The policy_id of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ReplicationExecution.

        The policy ID  # noqa: E501

        :param policy_id: The policy_id of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def status(self):
        """Gets the status of this ReplicationExecution.  # noqa: E501

        The status  # noqa: E501

        :return: The status of this ReplicationExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReplicationExecution.

        The status  # noqa: E501

        :param status: The status of this ReplicationExecution.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_text(self):
        """Gets the status_text of this ReplicationExecution.  # noqa: E501

        The status text  # noqa: E501

        :return: The status_text of this ReplicationExecution.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this ReplicationExecution.

        The status text  # noqa: E501

        :param status_text: The status_text of this ReplicationExecution.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def trigger(self):
        """Gets the trigger of this ReplicationExecution.  # noqa: E501

        The trigger mode  # noqa: E501

        :return: The trigger of this ReplicationExecution.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this ReplicationExecution.

        The trigger mode  # noqa: E501

        :param trigger: The trigger of this ReplicationExecution.  # noqa: E501
        :type: str
        """

        self._trigger = trigger

    @property
    def total(self):
        """Gets the total of this ReplicationExecution.  # noqa: E501

        The total count of all tasks  # noqa: E501

        :return: The total of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ReplicationExecution.

        The total count of all tasks  # noqa: E501

        :param total: The total of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def failed(self):
        """Gets the failed of this ReplicationExecution.  # noqa: E501

        The count of failed tasks  # noqa: E501

        :return: The failed of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this ReplicationExecution.

        The count of failed tasks  # noqa: E501

        :param failed: The failed of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._failed = failed

    @property
    def succeed(self):
        """Gets the succeed of this ReplicationExecution.  # noqa: E501

        The count of succeed tasks  # noqa: E501

        :return: The succeed of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._succeed

    @succeed.setter
    def succeed(self, succeed):
        """Sets the succeed of this ReplicationExecution.

        The count of succeed tasks  # noqa: E501

        :param succeed: The succeed of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._succeed = succeed

    @property
    def in_progress(self):
        """Gets the in_progress of this ReplicationExecution.  # noqa: E501

        The count of in_progress tasks  # noqa: E501

        :return: The in_progress of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this ReplicationExecution.

        The count of in_progress tasks  # noqa: E501

        :param in_progress: The in_progress of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._in_progress = in_progress

    @property
    def stopped(self):
        """Gets the stopped of this ReplicationExecution.  # noqa: E501

        The count of stopped tasks  # noqa: E501

        :return: The stopped of this ReplicationExecution.  # noqa: E501
        :rtype: int
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this ReplicationExecution.

        The count of stopped tasks  # noqa: E501

        :param stopped: The stopped of this ReplicationExecution.  # noqa: E501
        :type: int
        """

        self._stopped = stopped

    @property
    def start_time(self):
        """Gets the start_time of this ReplicationExecution.  # noqa: E501

        The start time  # noqa: E501

        :return: The start_time of this ReplicationExecution.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReplicationExecution.

        The start time  # noqa: E501

        :param start_time: The start_time of this ReplicationExecution.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ReplicationExecution.  # noqa: E501

        The end time  # noqa: E501

        :return: The end_time of this ReplicationExecution.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReplicationExecution.

        The end time  # noqa: E501

        :param end_time: The end_time of this ReplicationExecution.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationExecution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationExecution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
