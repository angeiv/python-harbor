# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ChartVersionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'ChartVersion',
        'security': 'SecurityReport',
        'dependencies': 'list[Dependency]',
        'values': 'dict(str, object)',
        'files': 'dict(str, str)',
        'labels': 'Labels'
    }

    attribute_map = {
        'metadata': 'metadata',
        'security': 'security',
        'dependencies': 'dependencies',
        'values': 'values',
        'files': 'files',
        'labels': 'labels'
    }

    def __init__(self, metadata=None, security=None, dependencies=None, values=None, files=None, labels=None):  # noqa: E501
        """ChartVersionDetails - a model defined in Swagger"""  # noqa: E501
        self._metadata = None
        self._security = None
        self._dependencies = None
        self._values = None
        self._files = None
        self._labels = None
        self.discriminator = None
        if metadata is not None:
            self.metadata = metadata
        if security is not None:
            self.security = security
        if dependencies is not None:
            self.dependencies = dependencies
        if values is not None:
            self.values = values
        if files is not None:
            self.files = files
        if labels is not None:
            self.labels = labels

    @property
    def metadata(self):
        """Gets the metadata of this ChartVersionDetails.  # noqa: E501


        :return: The metadata of this ChartVersionDetails.  # noqa: E501
        :rtype: ChartVersion
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ChartVersionDetails.


        :param metadata: The metadata of this ChartVersionDetails.  # noqa: E501
        :type: ChartVersion
        """

        self._metadata = metadata

    @property
    def security(self):
        """Gets the security of this ChartVersionDetails.  # noqa: E501


        :return: The security of this ChartVersionDetails.  # noqa: E501
        :rtype: SecurityReport
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this ChartVersionDetails.


        :param security: The security of this ChartVersionDetails.  # noqa: E501
        :type: SecurityReport
        """

        self._security = security

    @property
    def dependencies(self):
        """Gets the dependencies of this ChartVersionDetails.  # noqa: E501


        :return: The dependencies of this ChartVersionDetails.  # noqa: E501
        :rtype: list[Dependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ChartVersionDetails.


        :param dependencies: The dependencies of this ChartVersionDetails.  # noqa: E501
        :type: list[Dependency]
        """

        self._dependencies = dependencies

    @property
    def values(self):
        """Gets the values of this ChartVersionDetails.  # noqa: E501


        :return: The values of this ChartVersionDetails.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ChartVersionDetails.


        :param values: The values of this ChartVersionDetails.  # noqa: E501
        :type: dict(str, object)
        """

        self._values = values

    @property
    def files(self):
        """Gets the files of this ChartVersionDetails.  # noqa: E501


        :return: The files of this ChartVersionDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ChartVersionDetails.


        :param files: The files of this ChartVersionDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._files = files

    @property
    def labels(self):
        """Gets the labels of this ChartVersionDetails.  # noqa: E501


        :return: The labels of this ChartVersionDetails.  # noqa: E501
        :rtype: Labels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ChartVersionDetails.


        :param labels: The labels of this ChartVersionDetails.  # noqa: E501
        :type: Labels
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartVersionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartVersionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
