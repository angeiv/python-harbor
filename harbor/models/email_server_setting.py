# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EmailServerSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_host': 'str',
        'email_port': 'int',
        'email_username': 'str',
        'email_password': 'str',
        'email_ssl': 'bool',
        'email_identity': 'str'
    }

    attribute_map = {
        'email_host': 'email_host',
        'email_port': 'email_port',
        'email_username': 'email_username',
        'email_password': 'email_password',
        'email_ssl': 'email_ssl',
        'email_identity': 'email_identity'
    }

    def __init__(self, email_host=None, email_port=None, email_username=None, email_password=None, email_ssl=None, email_identity=None):  # noqa: E501
        """EmailServerSetting - a model defined in Swagger"""  # noqa: E501
        self._email_host = None
        self._email_port = None
        self._email_username = None
        self._email_password = None
        self._email_ssl = None
        self._email_identity = None
        self.discriminator = None
        if email_host is not None:
            self.email_host = email_host
        if email_port is not None:
            self.email_port = email_port
        if email_username is not None:
            self.email_username = email_username
        if email_password is not None:
            self.email_password = email_password
        if email_ssl is not None:
            self.email_ssl = email_ssl
        if email_identity is not None:
            self.email_identity = email_identity

    @property
    def email_host(self):
        """Gets the email_host of this EmailServerSetting.  # noqa: E501

        The host of email server.  # noqa: E501

        :return: The email_host of this EmailServerSetting.  # noqa: E501
        :rtype: str
        """
        return self._email_host

    @email_host.setter
    def email_host(self, email_host):
        """Sets the email_host of this EmailServerSetting.

        The host of email server.  # noqa: E501

        :param email_host: The email_host of this EmailServerSetting.  # noqa: E501
        :type: str
        """

        self._email_host = email_host

    @property
    def email_port(self):
        """Gets the email_port of this EmailServerSetting.  # noqa: E501

        The port of email server.  # noqa: E501

        :return: The email_port of this EmailServerSetting.  # noqa: E501
        :rtype: int
        """
        return self._email_port

    @email_port.setter
    def email_port(self, email_port):
        """Sets the email_port of this EmailServerSetting.

        The port of email server.  # noqa: E501

        :param email_port: The email_port of this EmailServerSetting.  # noqa: E501
        :type: int
        """

        self._email_port = email_port

    @property
    def email_username(self):
        """Gets the email_username of this EmailServerSetting.  # noqa: E501

        The username of email server.  # noqa: E501

        :return: The email_username of this EmailServerSetting.  # noqa: E501
        :rtype: str
        """
        return self._email_username

    @email_username.setter
    def email_username(self, email_username):
        """Sets the email_username of this EmailServerSetting.

        The username of email server.  # noqa: E501

        :param email_username: The email_username of this EmailServerSetting.  # noqa: E501
        :type: str
        """

        self._email_username = email_username

    @property
    def email_password(self):
        """Gets the email_password of this EmailServerSetting.  # noqa: E501

        The password of email server.  # noqa: E501

        :return: The email_password of this EmailServerSetting.  # noqa: E501
        :rtype: str
        """
        return self._email_password

    @email_password.setter
    def email_password(self, email_password):
        """Sets the email_password of this EmailServerSetting.

        The password of email server.  # noqa: E501

        :param email_password: The email_password of this EmailServerSetting.  # noqa: E501
        :type: str
        """

        self._email_password = email_password

    @property
    def email_ssl(self):
        """Gets the email_ssl of this EmailServerSetting.  # noqa: E501

        Use ssl/tls or not.  # noqa: E501

        :return: The email_ssl of this EmailServerSetting.  # noqa: E501
        :rtype: bool
        """
        return self._email_ssl

    @email_ssl.setter
    def email_ssl(self, email_ssl):
        """Sets the email_ssl of this EmailServerSetting.

        Use ssl/tls or not.  # noqa: E501

        :param email_ssl: The email_ssl of this EmailServerSetting.  # noqa: E501
        :type: bool
        """

        self._email_ssl = email_ssl

    @property
    def email_identity(self):
        """Gets the email_identity of this EmailServerSetting.  # noqa: E501

        The dentity of email server.  # noqa: E501

        :return: The email_identity of this EmailServerSetting.  # noqa: E501
        :rtype: str
        """
        return self._email_identity

    @email_identity.setter
    def email_identity(self, email_identity):
        """Sets the email_identity of this EmailServerSetting.

        The dentity of email server.  # noqa: E501

        :param email_identity: The email_identity of this EmailServerSetting.  # noqa: E501
        :type: str
        """

        self._email_identity = email_identity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailServerSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailServerSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
