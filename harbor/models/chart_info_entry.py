# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ChartInfoEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'total_versions': 'int',
        'latest_version': 'str',
        'created': 'str',
        'updated': 'str',
        'icon': 'str',
        'home': 'str',
        'deprecated': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'total_versions': 'total_versions',
        'latest_version': 'latest_version',
        'created': 'created',
        'updated': 'updated',
        'icon': 'icon',
        'home': 'home',
        'deprecated': 'deprecated'
    }

    def __init__(self, name=None, total_versions=None, latest_version=None, created=None, updated=None, icon=None, home=None, deprecated=None):  # noqa: E501
        """ChartInfoEntry - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._total_versions = None
        self._latest_version = None
        self._created = None
        self._updated = None
        self._icon = None
        self._home = None
        self._deprecated = None
        self.discriminator = None
        self.name = name
        self.total_versions = total_versions
        if latest_version is not None:
            self.latest_version = latest_version
        self.created = created
        if updated is not None:
            self.updated = updated
        if icon is not None:
            self.icon = icon
        if home is not None:
            self.home = home
        if deprecated is not None:
            self.deprecated = deprecated

    @property
    def name(self):
        """Gets the name of this ChartInfoEntry.  # noqa: E501

        Name of chart  # noqa: E501

        :return: The name of this ChartInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChartInfoEntry.

        Name of chart  # noqa: E501

        :param name: The name of this ChartInfoEntry.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def total_versions(self):
        """Gets the total_versions of this ChartInfoEntry.  # noqa: E501

        Total count of chart versions  # noqa: E501

        :return: The total_versions of this ChartInfoEntry.  # noqa: E501
        :rtype: int
        """
        return self._total_versions

    @total_versions.setter
    def total_versions(self, total_versions):
        """Sets the total_versions of this ChartInfoEntry.

        Total count of chart versions  # noqa: E501

        :param total_versions: The total_versions of this ChartInfoEntry.  # noqa: E501
        :type: int
        """
        if total_versions is None:
            raise ValueError("Invalid value for `total_versions`, must not be `None`")  # noqa: E501

        self._total_versions = total_versions

    @property
    def latest_version(self):
        """Gets the latest_version of this ChartInfoEntry.  # noqa: E501

        latest version of chart  # noqa: E501

        :return: The latest_version of this ChartInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this ChartInfoEntry.

        latest version of chart  # noqa: E501

        :param latest_version: The latest_version of this ChartInfoEntry.  # noqa: E501
        :type: str
        """

        self._latest_version = latest_version

    @property
    def created(self):
        """Gets the created of this ChartInfoEntry.  # noqa: E501

        The created time of chart  # noqa: E501

        :return: The created of this ChartInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ChartInfoEntry.

        The created time of chart  # noqa: E501

        :param created: The created of this ChartInfoEntry.  # noqa: E501
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this ChartInfoEntry.  # noqa: E501

        The created time of chart  # noqa: E501

        :return: The updated of this ChartInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ChartInfoEntry.

        The created time of chart  # noqa: E501

        :param updated: The updated of this ChartInfoEntry.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def icon(self):
        """Gets the icon of this ChartInfoEntry.  # noqa: E501

        The icon path of chart  # noqa: E501

        :return: The icon of this ChartInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ChartInfoEntry.

        The icon path of chart  # noqa: E501

        :param icon: The icon of this ChartInfoEntry.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def home(self):
        """Gets the home of this ChartInfoEntry.  # noqa: E501

        The home website of chart  # noqa: E501

        :return: The home of this ChartInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this ChartInfoEntry.

        The home website of chart  # noqa: E501

        :param home: The home of this ChartInfoEntry.  # noqa: E501
        :type: str
        """

        self._home = home

    @property
    def deprecated(self):
        """Gets the deprecated of this ChartInfoEntry.  # noqa: E501

        Flag to indicate if the chart is deprecated  # noqa: E501

        :return: The deprecated of this ChartInfoEntry.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this ChartInfoEntry.

        Flag to indicate if the chart is deprecated  # noqa: E501

        :param deprecated: The deprecated of this ChartInfoEntry.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartInfoEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartInfoEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
