# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'username': 'str',
        'email': 'str',
        'password': 'str',
        'realname': 'str',
        'comment': 'str',
        'deleted': 'bool',
        'role_name': 'str',
        'role_id': 'int',
        'has_admin_role': 'bool',
        'reset_uuid': 'str',
        'salt': 'str',
        'creation_time': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'username': 'username',
        'email': 'email',
        'password': 'password',
        'realname': 'realname',
        'comment': 'comment',
        'deleted': 'deleted',
        'role_name': 'role_name',
        'role_id': 'role_id',
        'has_admin_role': 'has_admin_role',
        'reset_uuid': 'reset_uuid',
        'salt': 'Salt',
        'creation_time': 'creation_time',
        'update_time': 'update_time'
    }

    def __init__(self, user_id=None, username=None, email=None, password=None, realname=None, comment=None, deleted=None, role_name=None, role_id=None, has_admin_role=None, reset_uuid=None, salt=None, creation_time=None, update_time=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._username = None
        self._email = None
        self._password = None
        self._realname = None
        self._comment = None
        self._deleted = None
        self._role_name = None
        self._role_id = None
        self._has_admin_role = None
        self._reset_uuid = None
        self._salt = None
        self._creation_time = None
        self._update_time = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if password is not None:
            self.password = password
        if realname is not None:
            self.realname = realname
        if comment is not None:
            self.comment = comment
        if deleted is not None:
            self.deleted = deleted
        if role_name is not None:
            self.role_name = role_name
        if role_id is not None:
            self.role_id = role_id
        if has_admin_role is not None:
            self.has_admin_role = has_admin_role
        if reset_uuid is not None:
            self.reset_uuid = reset_uuid
        if salt is not None:
            self.salt = salt
        if creation_time is not None:
            self.creation_time = creation_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501

        The ID of the user.  # noqa: E501

        :return: The user_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        The ID of the user.  # noqa: E501

        :param user_id: The user_id of this User.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def realname(self):
        """Gets the realname of this User.  # noqa: E501


        :return: The realname of this User.  # noqa: E501
        :rtype: str
        """
        return self._realname

    @realname.setter
    def realname(self, realname):
        """Sets the realname of this User.


        :param realname: The realname of this User.  # noqa: E501
        :type: str
        """

        self._realname = realname

    @property
    def comment(self):
        """Gets the comment of this User.  # noqa: E501


        :return: The comment of this User.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this User.


        :param comment: The comment of this User.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def deleted(self):
        """Gets the deleted of this User.  # noqa: E501


        :return: The deleted of this User.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this User.


        :param deleted: The deleted of this User.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def role_name(self):
        """Gets the role_name of this User.  # noqa: E501


        :return: The role_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this User.


        :param role_name: The role_name of this User.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def role_id(self):
        """Gets the role_id of this User.  # noqa: E501


        :return: The role_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this User.


        :param role_id: The role_id of this User.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def has_admin_role(self):
        """Gets the has_admin_role of this User.  # noqa: E501


        :return: The has_admin_role of this User.  # noqa: E501
        :rtype: bool
        """
        return self._has_admin_role

    @has_admin_role.setter
    def has_admin_role(self, has_admin_role):
        """Sets the has_admin_role of this User.


        :param has_admin_role: The has_admin_role of this User.  # noqa: E501
        :type: bool
        """

        self._has_admin_role = has_admin_role

    @property
    def reset_uuid(self):
        """Gets the reset_uuid of this User.  # noqa: E501


        :return: The reset_uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._reset_uuid

    @reset_uuid.setter
    def reset_uuid(self, reset_uuid):
        """Sets the reset_uuid of this User.


        :param reset_uuid: The reset_uuid of this User.  # noqa: E501
        :type: str
        """

        self._reset_uuid = reset_uuid

    @property
    def salt(self):
        """Gets the salt of this User.  # noqa: E501


        :return: The salt of this User.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this User.


        :param salt: The salt of this User.  # noqa: E501
        :type: str
        """

        self._salt = salt

    @property
    def creation_time(self):
        """Gets the creation_time of this User.  # noqa: E501


        :return: The creation_time of this User.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this User.


        :param creation_time: The creation_time of this User.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this User.  # noqa: E501


        :return: The update_time of this User.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this User.


        :param update_time: The update_time of this User.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
