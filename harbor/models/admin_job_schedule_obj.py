# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AdminJobScheduleObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'cron': 'str'
    }

    attribute_map = {
        'type': 'type',
        'cron': 'cron'
    }

    def __init__(self, type=None, cron=None):  # noqa: E501
        """AdminJobScheduleObj - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._cron = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if cron is not None:
            self.cron = cron

    @property
    def type(self):
        """Gets the type of this AdminJobScheduleObj.  # noqa: E501

        The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manually' and 'None'. 'Manually' means to trigger it right away and 'None' means to cancel the schedule.   # noqa: E501

        :return: The type of this AdminJobScheduleObj.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdminJobScheduleObj.

        The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manually' and 'None'. 'Manually' means to trigger it right away and 'None' means to cancel the schedule.   # noqa: E501

        :param type: The type of this AdminJobScheduleObj.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def cron(self):
        """Gets the cron of this AdminJobScheduleObj.  # noqa: E501

        A cron expression, a time-based job scheduler.  # noqa: E501

        :return: The cron of this AdminJobScheduleObj.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this AdminJobScheduleObj.

        A cron expression, a time-based job scheduler.  # noqa: E501

        :param cron: The cron of this AdminJobScheduleObj.  # noqa: E501
        :type: str
        """

        self._cron = cron

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminJobScheduleObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminJobScheduleObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
