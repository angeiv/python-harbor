# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from harbor.api_client import ApiClient


class ScannersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def projects_project_id_scanner_candidates_get(self, project_id, **kwargs):  # noqa: E501
        """Get scanner registration candidates for configurating project level scanner  # noqa: E501

        Retrieve the system configured scanner registrations as candidates of setting project level scanner.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_scanner_candidates_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project identifier. (required)
        :return: list[ScannerRegistration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_scanner_candidates_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_scanner_candidates_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_scanner_candidates_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get scanner registration candidates for configurating project level scanner  # noqa: E501

        Retrieve the system configured scanner registrations as candidates of setting project level scanner.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_scanner_candidates_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project identifier. (required)
        :return: list[ScannerRegistration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_scanner_candidates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_scanner_candidates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/scanner/candidates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScannerRegistration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_scanner_get(self, project_id, **kwargs):  # noqa: E501
        """Get project level scanner  # noqa: E501

        Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_scanner_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project identifier. (required)
        :return: ScannerRegistration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_scanner_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_scanner_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_scanner_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get project level scanner  # noqa: E501

        Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_scanner_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project identifier. (required)
        :return: ScannerRegistration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_scanner_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_scanner_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/scanner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScannerRegistration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_scanner_put(self, body, project_id, **kwargs):  # noqa: E501
        """Configure scanner for the specified project  # noqa: E501

        Set one of the system configured scanner registration as the indepndent scanner of the specified project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_scanner_put(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectScanner body: (required)
        :param int project_id: The project identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_scanner_put_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_scanner_put_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_scanner_put_with_http_info(self, body, project_id, **kwargs):  # noqa: E501
        """Configure scanner for the specified project  # noqa: E501

        Set one of the system configured scanner registration as the indepndent scanner of the specified project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_scanner_put_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectScanner body: (required)
        :param int project_id: The project identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_scanner_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `projects_project_id_scanner_put`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_scanner_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/scanner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_get(self, **kwargs):  # noqa: E501
        """List scanner registrations  # noqa: E501

        Returns a list of currently configured scanner registrations.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ScannerRegistration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.scanners_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def scanners_get_with_http_info(self, **kwargs):  # noqa: E501
        """List scanner registrations  # noqa: E501

        Returns a list of currently configured scanner registrations.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ScannerRegistration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScannerRegistration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_ping_post(self, body, **kwargs):  # noqa: E501
        """Tests scanner registration settings  # noqa: E501

        Pings scanner adapter to test endpoint URL and authorization settings.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_ping_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScannerRegistrationSettings body: A scanner registration settings to be tested. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_ping_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_ping_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def scanners_ping_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Tests scanner registration settings  # noqa: E501

        Pings scanner adapter to test endpoint URL and authorization settings.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_ping_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScannerRegistrationSettings body: A scanner registration settings to be tested. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_ping_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `scanners_ping_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners/ping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_post(self, body, **kwargs):  # noqa: E501
        """Create a scanner registration  # noqa: E501

        Creats a new scanner registration with the given data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScannerRegistrationReq body: A scanner registration to be created. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def scanners_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a scanner registration  # noqa: E501

        Creats a new scanner registration with the given data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScannerRegistrationReq body: A scanner registration to be created. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `scanners_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_registration_id_delete(self, registration_id, **kwargs):  # noqa: E501
        """Delete a scanner registration  # noqa: E501

        Deletes the specified scanner registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_delete(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: The scanner registration identifier. (required)
        :return: ScannerRegistration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_registration_id_delete_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_registration_id_delete_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def scanners_registration_id_delete_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Delete a scanner registration  # noqa: E501

        Deletes the specified scanner registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_delete_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: The scanner registration identifier. (required)
        :return: ScannerRegistration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_registration_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `scanners_registration_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registration_id'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners/{registration_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScannerRegistration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_registration_id_get(self, registration_id, **kwargs):  # noqa: E501
        """Get a scanner registration details  # noqa: E501

        Retruns the details of the specified scanner registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_get(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: The scanner registration identifer. (required)
        :return: ScannerRegistration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_registration_id_get_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_registration_id_get_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def scanners_registration_id_get_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get a scanner registration details  # noqa: E501

        Retruns the details of the specified scanner registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_get_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: The scanner registration identifer. (required)
        :return: ScannerRegistration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_registration_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `scanners_registration_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registration_id'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners/{registration_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScannerRegistration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_registration_id_metadata_get(self, registration_id, **kwargs):  # noqa: E501
        """Get the metadata of the specified scanner registration  # noqa: E501

        Get the metadata of the specified scanner registration, including the capabilities and customzied properties.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_metadata_get(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: The scanner registration identifier. (required)
        :return: ScannerAdapterMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_registration_id_metadata_get_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_registration_id_metadata_get_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def scanners_registration_id_metadata_get_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get the metadata of the specified scanner registration  # noqa: E501

        Get the metadata of the specified scanner registration, including the capabilities and customzied properties.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_metadata_get_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: The scanner registration identifier. (required)
        :return: ScannerAdapterMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_registration_id_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `scanners_registration_id_metadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registration_id'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners/{registration_id}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScannerAdapterMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_registration_id_patch(self, body, registration_id, **kwargs):  # noqa: E501
        """Set system default scanner registration  # noqa: E501

        Set the specified scanner registration as the system default one.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_patch(body, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IsDefault body: (required)
        :param str registration_id: The scanner registration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_registration_id_patch_with_http_info(body, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_registration_id_patch_with_http_info(body, registration_id, **kwargs)  # noqa: E501
            return data

    def scanners_registration_id_patch_with_http_info(self, body, registration_id, **kwargs):  # noqa: E501
        """Set system default scanner registration  # noqa: E501

        Set the specified scanner registration as the system default one.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_patch_with_http_info(body, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IsDefault body: (required)
        :param str registration_id: The scanner registration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_registration_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `scanners_registration_id_patch`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `scanners_registration_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registration_id'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners/{registration_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scanners_registration_id_put(self, body, registration_id, **kwargs):  # noqa: E501
        """Update a scanner registration  # noqa: E501

        Updates the specified scanner registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_put(body, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScannerRegistrationReq body: A scanner registraiton to be updated. (required)
        :param str registration_id: The scanner registration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scanners_registration_id_put_with_http_info(body, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.scanners_registration_id_put_with_http_info(body, registration_id, **kwargs)  # noqa: E501
            return data

    def scanners_registration_id_put_with_http_info(self, body, registration_id, **kwargs):  # noqa: E501
        """Update a scanner registration  # noqa: E501

        Updates the specified scanner registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scanners_registration_id_put_with_http_info(body, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScannerRegistrationReq body: A scanner registraiton to be updated. (required)
        :param str registration_id: The scanner registration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scanners_registration_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `scanners_registration_id_put`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `scanners_registration_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registration_id'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scanners/{registration_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
