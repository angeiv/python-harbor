# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from harbor.api_client import ApiClient


class ScanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def repositories_repo_name_tags_tag_scan_get(self, repo_name, tag, **kwargs):  # noqa: E501
        """Get the scan report  # noqa: E501

        Retrieve the scan report for the artifact identified by the repo_name and tag.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_repo_name_tags_tag_scan_get(repo_name, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str tag: Tag name (required)
        :param str accept: Mimetype in header. e.g: \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" 
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repositories_repo_name_tags_tag_scan_get_with_http_info(repo_name, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_repo_name_tags_tag_scan_get_with_http_info(repo_name, tag, **kwargs)  # noqa: E501
            return data

    def repositories_repo_name_tags_tag_scan_get_with_http_info(self, repo_name, tag, **kwargs):  # noqa: E501
        """Get the scan report  # noqa: E501

        Retrieve the scan report for the artifact identified by the repo_name and tag.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_repo_name_tags_tag_scan_get_with_http_info(repo_name, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str tag: Tag name (required)
        :param str accept: Mimetype in header. e.g: \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" 
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'tag', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_repo_name_tags_tag_scan_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `repositories_repo_name_tags_tag_scan_get`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `repositories_repo_name_tags_tag_scan_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repo_name'] = params['repo_name']  # noqa: E501
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repo_name}/tags/{tag}/scan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_repo_name_tags_tag_scan_post(self, repo_name, tag, **kwargs):  # noqa: E501
        """Scan the image.  # noqa: E501

        Trigger a scan targeting the artifact identified by the repo_name and tag.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_repo_name_tags_tag_scan_post(repo_name, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str tag: Tag name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repositories_repo_name_tags_tag_scan_post_with_http_info(repo_name, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_repo_name_tags_tag_scan_post_with_http_info(repo_name, tag, **kwargs)  # noqa: E501
            return data

    def repositories_repo_name_tags_tag_scan_post_with_http_info(self, repo_name, tag, **kwargs):  # noqa: E501
        """Scan the image.  # noqa: E501

        Trigger a scan targeting the artifact identified by the repo_name and tag.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_repo_name_tags_tag_scan_post_with_http_info(repo_name, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str tag: Tag name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_repo_name_tags_tag_scan_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `repositories_repo_name_tags_tag_scan_post`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `repositories_repo_name_tags_tag_scan_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repo_name'] = params['repo_name']  # noqa: E501
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repo_name}/tags/{tag}/scan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_repo_name_tags_tag_scan_uuid_log_get(self, repo_name, tag, uuid, **kwargs):  # noqa: E501
        """Get scan log  # noqa: E501

        Get the log text stream for the given artifact and scan action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_repo_name_tags_tag_scan_uuid_log_get(repo_name, tag, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str tag: Tag name (required)
        :param str uuid: the scan unique identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repositories_repo_name_tags_tag_scan_uuid_log_get_with_http_info(repo_name, tag, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_repo_name_tags_tag_scan_uuid_log_get_with_http_info(repo_name, tag, uuid, **kwargs)  # noqa: E501
            return data

    def repositories_repo_name_tags_tag_scan_uuid_log_get_with_http_info(self, repo_name, tag, uuid, **kwargs):  # noqa: E501
        """Get scan log  # noqa: E501

        Get the log text stream for the given artifact and scan action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_repo_name_tags_tag_scan_uuid_log_get_with_http_info(repo_name, tag, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str tag: Tag name (required)
        :param str uuid: the scan unique identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'tag', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_repo_name_tags_tag_scan_uuid_log_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `repositories_repo_name_tags_tag_scan_uuid_log_get`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `repositories_repo_name_tags_tag_scan_uuid_log_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `repositories_repo_name_tags_tag_scan_uuid_log_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repo_name'] = params['repo_name']  # noqa: E501
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repo_name}/tags/{tag}/scan/{uuid}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_all_metrics_get(self, **kwargs):  # noqa: E501
        """Get the metrics of the latest scan all process  # noqa: E501

        Get the metrics of the latest scan all process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_all_metrics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Stats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_all_metrics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.scans_all_metrics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def scans_all_metrics_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the metrics of the latest scan all process  # noqa: E501

        Get the metrics of the latest scan all process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_all_metrics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Stats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_all_metrics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans/all/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_schedule_metrics_get(self, **kwargs):  # noqa: E501
        """Get the metrics of the latest scheduled scan all process  # noqa: E501

        Get the metrics of the latest scheduled scan all process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_schedule_metrics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Stats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_schedule_metrics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.scans_schedule_metrics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def scans_schedule_metrics_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the metrics of the latest scheduled scan all process  # noqa: E501

        Get the metrics of the latest scheduled scan all process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_schedule_metrics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Stats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_schedule_metrics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans/schedule/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
